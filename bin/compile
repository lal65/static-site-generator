#!/usr/bin/env php
<?php

use League\CommonMark\Extension\FrontMatter\Data\LibYamlFrontMatterParser;
use League\CommonMark\Extension\FrontMatter\FrontMatterParser;
use ooe\Compiler;
use Twig\Loader\FilesystemLoader;

include $_composer_autoload_path ?? __DIR__ . '/../vendor/autoload.php';

// Create necessary directories.
if (!file_exists('dist') && !mkdir($dist_dir = 'dist' . DIRECTORY_SEPARATOR . 'images', 0777, TRUE) && !is_dir($dist_dir)) {
  throw new \RuntimeException(sprintf('Directory "%s" could not be created', $dist_dir));
}


$vendor_pkg = 'vendor' . DIRECTORY_SEPARATOR . 'psu-ooe' . DIRECTORY_SEPARATOR . 'static-site-generator';
if (file_exists($vendor_pkg)) {
  exec("cd $vendor_pkg && npm install");
}

$paths = array_filter([
  'blocks',
  'templates',
  'vendor' . DIRECTORY_SEPARATOR . 'psu-ooe' . DIRECTORY_SEPARATOR . 'static-site-generator' . DIRECTORY_SEPARATOR . 'blocks',
  'vendor' . DIRECTORY_SEPARATOR . 'psu-ooe' . DIRECTORY_SEPARATOR . 'static-site-generator' . DIRECTORY_SEPARATOR . 'templates',
], static fn($path) => file_exists($path));

$loader = new FilesystemLoader($paths);
$paths = array_filter([
  'node_modules/@psu-ooe',
  'vendor' . DIRECTORY_SEPARATOR . 'psu-ooe' . DIRECTORY_SEPARATOR . 'static-site-generator' . DIRECTORY_SEPARATOR . 'node_modules' . DIRECTORY_SEPARATOR . '@psu-ooe',
], static fn($path) => file_exists($path));

foreach ($paths as $path) {
  if (file_exists($path)) {
    $loader->addPath($path, 'psu-ooe');
    break;
  }
}

$twig = Compiler::getInstance();

$frontMatterParser = new FrontMatterParser(new LibYamlFrontMatterParser());

foreach (new RecursiveIteratorIterator(new RecursiveDirectoryIterator('pages', FilesystemIterator::SKIP_DOTS), RecursiveIteratorIterator::SELF_FIRST) as $page) {
  $dest = 'dist' . DIRECTORY_SEPARATOR . preg_replace('/^pages\//', '', $page->getPathname());
  if ($page->isDir()) {
    continue;
  }
  $context = yaml_parse(file_get_contents('config.yml'));
  $context['current_page'] = preg_replace('/^pages\//', '', $page->getPathname());
  $content = file_get_contents($page);
  $result = $frontMatterParser->parse($content);
  $frontmatter = $result->getFrontMatter();

  if (is_array($frontmatter)) {
    $context += $frontmatter;
  }

  $blocks = [];
  foreach (glob('blocks/*') as $region) {
    $region_name = basename($region);
    foreach (glob("$region/*.twig") as $block) {
      $block_name = basename($block);
      $blocks[$region_name][$block_name] = $twig->render($region_name . DIRECTORY_SEPARATOR . $block_name, $context);
    }
  }

  $context['blocks'] = $blocks;

  if (isset($context['page_image'])) {
    $imagick = new IMagick();
    $imagick->readImage('images/' . $context['page_image']);
    foreach ([[1920, 1280], [1280, 720], [768, 432]] as $resolution) {
      $derivative = clone $imagick;
      $derivative->scaleImage($resolution[0], $resolution[1]);
      $derivative->setImageFormat('webp');
      $derivative->setImageCompressionQuality(50);
      $derivative->writeImage('dist/images/' . $context['page_image'] . '@' . $resolution[0] . 'x' . $resolution[1] . '.webp');
    }
  }

  if (!file_exists(dirname($dest))) {
    mkdir(dirname($dest), 0777, TRUE);
  }
  $context['content'] = $twig->createTemplate($result->getContent())->render($context);

  file_put_contents(preg_replace('/\.md$/', '.html', $dest), $twig->render('page.twig', $context));
}